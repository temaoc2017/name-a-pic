<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Room <%= roomName %></title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
          crossorigin="anonymous">
    <style media="screen">
      * {
  			box-sizing: border-box;
  		}

      body, input, button {
        font-size: 1.5rem;
      }

      body {
        background-size: cover;
        background-image: url("/ba.avif");
      }

      input, button {
        box-sizing: border-box;
      }

      #room-name, #current-player-and-name {
        text-align: center;
        border-radius: 15px;
        background-color: rgba(200, 100, 200, 0.3);
      }

      #ingame-players-list {
        text-align: center;
        border-radius: 15px;
        background-color: rgba(255, 100, 100, 0.3);
      }

      #game-container {
        width: 100%;
      }

      #played-cards-container, #hand-cards-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
      }

      #pregame-container, #game-container {
        margin-top: 50px;
      }

      body {
  			margin: 0;
  			padding: 0;
  			font-family: sans-serif;
  			background-color: #f2f2f2;
  		}

      .container {
  			max-width: 1200px;
  			margin: 0 auto;
  			padding: 20px;
  		}

  		.row {
  			display: flex;
  			flex-wrap: wrap;
  			margin: -20px;
  		}

  		.card {
  			flex: 1 1 300px;
  			margin: 10px;
  			padding: 10px;
        max-width: calc(25% - 20px);
  			background-color: #fff;
  			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  			transition: all 0.3s ease;
  		}

  		.card:hover {
  			transform: translateY(-10px);
  			box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  		}

  		.card img {
  			display: block;
  			margin: 0 auto;
  			max-width: 100%;
  			height: auto;
  		}

  		.card h2 {
  			margin-top: 0;
  			font-size: 1.5em;
  			font-weight: normal;
  		}

  		.card p {
  			margin-bottom: 0;
  			font-size: 1.2em;
  			line-height: 1.5;
  		}

      #preview {
        visibility: hidden;
        border-radius: 10px;
        border-width: 5px;
        border-color: antiquewhite;
      }

      .center-screen {
        position: fixed;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        max-height: 100vh;
        transform: translate(-50%, -50%);
      }

      @media screen and (max-width: 1080px) {
        .card {
          max-width: calc(33.33% - 20px);
        }
      }

      @media screen and (max-width: 768px) {
        .card {
          max-width: calc(50% - 20px);
        }
      }

      @media screen and (max-width: 576px) {
        .card {
          max-width: calc(100% - 20px);
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="row justify-content-center mt-3">
        <div class="col-md-6">
          <h3 id="room-name" class="text-center">Room <%= roomName %></h3>
        </div>
      </div>

      <div id="pregame-container" class="pb-4">
        <div class="row justify-content-center">
          <div class="col-md-6">
            <ul id="players-list" class="list-group list-group-flush">
              <% for (var i = 0; i < players.length ; i++) { %>
                <li class="list-group-item text-center"> <%= players[i] %> </li>
              <% } %>
            </ul>
          </div>
        </div>

        <div class="row justify-content-center mt-3">
          <div class="col-md-6">
            <button type="button" name="readyButton" id="readyButton" class="btn btn-primary btn-block">Ready</button>
          </div>
        </div>

        <div class="row justify-content-center mt-3">
          <div class="col-md-6">
            <button type="button" name="startButton" id="startButton" class="btn btn-success btn-block">Start</button>
          </div>
        </div>
      </div>

      <div id="game-container">
        <div class="row justify-content-center mb-4">
          <div class="col-md-6">
            <ul id="ingame-players-list" class="list-group list-group-flush">&nbsp;</ul>
          </div>
        </div>

        <div class="row justify-content-center mb-4">
          <div class="col-md-6">
            <p id="current-player-and-name" class="text-center mb-2"><span id="current-player"></span><span id="current-name">choosing a card</span></p>
          </div>
        </div>

        <div class="row justify-content-center mb-4">
          <div class="col-md-12">
            <div id="played-cards-container"></div>
          </div>
        </div>

        <div class="row justify-content-center mb-4">
          <div class="col-md-12">
            <div id="hand-cards-container"></div>
          </div>
        </div>
      </div>
    </div>
    <img id="preview" class="center-screen"></img>
    <script src="/socket.io/socket.io.js"></script>
    <script>
// Pass the room ID and name to the client-side script
let roomId = '<%= roomId %>';
let roomName = '<%= roomName %>';
let playerName = '<%= playerName %>';
let socket = io();

let isReady = false;
let isNamingCard = false;


socket.on('join room success', () => {
  console.log('join room success');
});

socket.on('new player', (players) => {
  // console.log(players);
  playersList = document.getElementById("players-list")
  playersList.innerHTML = "";

  for (var i = 0; i < players.length ; i++) {
    playersList.innerHTML += `<li> ${players[i]} </li>\n`
  }
})

socket.on('readiness updated', (playersReadiness) => {
  // console.log(playersReadiness);
  playersList = document.getElementById("players-list")
  playersList.innerHTML = "";

  for (var i = 0; i < playersReadiness.length ; i++) {
    let color = "black";
    if (playersReadiness[i].isReady) {
      color = "green"
    }
    playersList.innerHTML += `<li style="color:${color}"> ${playersReadiness[i].name} </li>\n`
  }
})

document.getElementById('readyButton').onclick = function() {
  isReady = !isReady;

  if (isReady) {
    this.innerHTML = "Not Ready"
  } else {
    this.innerHTML = "Ready"
  }

  socket.emit('update readiness', roomId, playerName, isReady)
}

document.getElementById('startButton').onclick = function() {
  socket.emit('try start game', roomId)
}

document.getElementById('preview').onclick = function(e) {
  document.getElementById('preview').style.visibility = "hidden";
}


socket.on('start error few players', () => {
  alert("Too few players!")
});

socket.on('start error not ready', () => {
  alert("Not everybody is ready!")
});

socket.on('vote error voted self', () => {
  // votedThisRound = false;
  alert("Don't vote your card!");
});


socket.on('game started', (currentPlayerName, handCards, playersWithScores, currentName, playedCards) => {
  document.getElementById('current-player').textContent = currentPlayerName + " - ";
  if (currentName) {
    document.getElementById('current-name').textContent = currentName;
  }
  if (currentPlayerName == playerName) {
    isNamingCard = true;
  } else {
    isNamingCard = false;
  }

  document.getElementById('pregame-container').style.display = 'none';

  let cardsContainer = document.getElementById('hand-cards-container');
  fillContainerWithCards(cardsContainer, handCards, chooseCardCallback, true);

  if (playedCards && playedCards[0] != "") {
    console.log(playedCards);
    let cardsContainer = document.getElementById('played-cards-container');
    fillContainerWithCards(cardsContainer, playedCards, voteForCardCallback, false);
  }

  displayPlayersWithScores(playersWithScores);
})

function chooseCardCallback() {
  if (isNamingCard && this.parentElement.lastChild.value == "") {
    alert("Name this card!");
  } else {
    let wasGray = (this.parentElement.style.backgroundColor == "dimgray");
    resetCardsBackground(document.getElementById("hand-cards-container"));
    this.parentElement.style.backgroundColor = wasGray ? "white" : "dimgray";
    socket.emit('choose card', roomId,
                getCardFileNameFromUrl(this.src),
                this.parentElement.lastChild.value);
  }
}

function fillContainerWithCards(domContainer, cardsImagesSrcs, callback, addTextInput) {
  domContainer.innerHTML = "";
  for (let i = 0; i < cardsImagesSrcs.length; i++) {
    let cardImageSrc = cardsImagesSrcs[i];
    let cardDiv = createCardNode(cardImageSrc, callback, addTextInput);
    domContainer.appendChild(cardDiv);
  }
}

function previewEventListener(e) {
  e.preventDefault();
  document.getElementById('preview').src = e.srcElement.src;
  document.getElementById('preview').style.visibility = "visible";
  return true;
}

function createCardNode(cardImageSrc, callback, addTextInput) {
  let cardDiv = document.createElement('div');
  cardDiv.classList.add('card');
  let cardImg = document.createElement('img');
  cardImg.style.width = "100%";
  cardImg.src = "/cards/" + cardImageSrc;
  let linkPattern = /^https:\/\//;
  if (cardImageSrc.match(linkPattern) != null) {
    cardImg.src = cardImageSrc;
  }
  cardImg.onclick = callback;
  cardImg.addEventListener('contextmenu', previewEventListener, false);
  let cardText = document.createElement('input');
  cardText.style.width = "100%";
  cardText.type = "text";
  cardText.placeholder = "Prepare a name here";

  cardDiv.appendChild(cardImg);
  if (addTextInput) {
    cardDiv.appendChild(cardText);
  }

  return cardDiv;
}

socket.on('card name chosen', (cardName) => {
  document.getElementById('current-name').textContent = cardName;
  console.log(cardName);
});

socket.on('card chosen', (readyPlayersList) => {
  console.log(readyPlayersList);
});

socket.on('all cards chosen', (cardsList) => {
  let cardsContainer = document.getElementById('played-cards-container');
  fillContainerWithCards(cardsContainer, cardsList, voteForCardCallback, false);

  console.log(cardsList);
});

socket.on('new round', (currentPlayerName, handCards, playersWithScores, roundSummary) => {
  roundSummary = new Map(roundSummary);
  console.log(roundSummary);
  // document.getElementById('played-cards-container').innerHTML = "";
  for (let card of document.getElementById("played-cards-container").children) {
    let cardName = getCardFileNameFromUrl(card.firstChild.src);
    let newP = document.createElement('p');
    newP.setAttribute('style', 'white-space: pre;');
    newP.setAttribute('style', 'overflow-wrap: break-word;');
    newP.textContent = `Played: ${roundSummary.get(cardName).cardOwner}`;
    if (roundSummary.get(cardName).playersVoted.length > 0) {
      newP.textContent += `\nVoted: ${roundSummary.get(cardName).playersVoted}`;
    }
    newP.style.textShadow = "3px 3px 6px black";
    newP.style.borderRadius = "10px 10px 0 0";
    newP.style.padding = "5px";
    newP.style.backgroundColor = "#fddb";
    newP.style.position = "absolute";
    let cardPadding = window.getComputedStyle(card, null).getPropertyValue('padding')
    newP.style.bottom = newP.style.left = cardPadding;
    console.log(cardPadding);
    newP.style.width = `calc(100% - ${cardPadding} - ${cardPadding})`;
    card.appendChild(newP);
  }
  document.getElementById('current-player').textContent = currentPlayerName + " - ";
  document.getElementById('current-name').textContent = "choosing a card";
  if (currentPlayerName == playerName) {
    isNamingCard = true;
  } else {
    isNamingCard = false;
  }

  let handCardsContainer = document.getElementById('hand-cards-container');
  let oldHandMatchFound = new Array(handCards.length).fill(false);
  let newHandMatchFound = new Array(handCards.length).fill(false);
  let currentHandCard = 0;

  for (let i = 0; i < handCardsContainer.children.length; i++) {
    let imageName = getCardFileNameFromUrl(handCardsContainer.children[i].firstChild.src);
    for (let j = 0; j < handCards.length; j++) {
      if (imageName == handCards[j]) {
        oldHandMatchFound[i] = true;
        newHandMatchFound[j] = true;
        break;
      }
    }
  }

  currentHandCard = 0;
  let removedChild = false;
  for (let i = 0; i < handCardsContainer.children.length; i++) {
    if (!removedChild) {
      if (!oldHandMatchFound[i]) {
        handCardsContainer.removeChild(handCardsContainer.children[i]);
        removedChild = true;
      }
    }
  }

  for (let i = 0; i < newHandMatchFound.length; i++) {
    if (!newHandMatchFound[i]) {
      handCardsContainer.appendChild(createCardNode(handCards[i], chooseCardCallback, true));
      break;
    }
  }

  displayPlayersWithScores(playersWithScores);
});

function voteForCardCallback() {
  if (isNamingCard) {
    alert("You have no voting rights");
  } else {
    // let wasGray = (this.parentElement.style.backgroundColor == "dimgray")
    resetCardsBackground(document.getElementById("played-cards-container"));
    this.parentElement.style.backgroundColor = "dimgray";
    socket.emit('vote card', roomId, getCardFileNameFromUrl(this.src));
  }
}

function getCardFileNameFromUrl(src) {
  let index = src.lastIndexOf("/") + 1;
  let filename = src.substr(index);
  let linkPattern = /^https:\/\/cdn/;
  if (src.match(linkPattern) != null) {
    filename = src;
  }
  console.log(filename)
  return filename;
}

function displayPlayersWithScores(playersWithScores) {
  let playersListDiv = document.getElementById('ingame-players-list');
  playersListDiv.innerHTML = "";

  for (let i = 0; i < playersWithScores.length; i++) {
    let playerName = playersWithScores[i].name;
    let playerScore = playersWithScores[i].score;
    let playerDiv = document.createElement('div');
    playerDiv.innerHTML = `${playerName}: ${playerScore}`;

    playersListDiv.appendChild(playerDiv);
  }
}

function resetCardsBackground(cardsContainer) {
  for (let card of cardsContainer.children) {
    card.style.background = "white";
  }
}


socket.emit('join room', roomId, playerName)

socket.on('join room success', () => {
  socket.emit('update readiness', roomId, playerName, isReady);
})
    </script>
  </body>
</html>
